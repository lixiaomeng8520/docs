Git
===

* `【Git学习】使用git reflog 命令来查看历史提交记录并使用提交记录恢复已经被删除掉的分支 <https://blog.csdn.net/ouyang_peng/article/details/84061662>`_
* `GIT 常用命令 <http://www.cnblogs.com/chenwolong/p/GIT.html>`_

remote
------

+----------------------------+----------------------------------------------------------------+
| 描述                       | 命令                                                           |
+============================+================================================================+
| 添加名为origin的远程服务器 | git remote add origin gitpath                                  |
+----------------------------+----------------------------------------------------------------+
  
branch
------

+----------------------------+----------------------------------------------------------------+
| 描述                       | 命令                                                           |
+============================+================================================================+
| 列出所有本地分支           | git branch                                                     |
+----------------------------+----------------------------------------------------------------+
| 列出所有远程分支           | git branch -r                                                  |
+----------------------------+----------------------------------------------------------------+
| 列出所有分支               | git branch -a                                                  |
+----------------------------+----------------------------------------------------------------+
| 新建分支，不切换           | git branch dev [commit]                                        |
+----------------------------+----------------------------------------------------------------+
| 新建分支，并切换           | git checkout -b dev [commit]                                   |
+----------------------------+----------------------------------------------------------------+
| 删除分支                   | git branch -d dev                                              |
+----------------------------+----------------------------------------------------------------+
| 设定跟踪分支               | git branch -u origin/dev dev                                   |
+----------------------------+----------------------------------------------------------------+

pull
----

没有写本地分支的，都是指当前分支。

没有写远程分支的，则必须当前分支有跟踪的远程分支，否则会报错。

+-----------------------------+----------------------------------------------------------------+
| 描述                        | 命令                                                           |
+=============================+================================================================+
| 完整形式                    | git pull server remote_branch:local_branch                     |
+-----------------------------+----------------------------------------------------------------+
| 与当前分支合并              | git pull server remote_branch                                  |
+-----------------------------+----------------------------------------------------------------+
| 与当前分支合并（从跟踪分支）| git pull server                                                |
+-----------------------------+----------------------------------------------------------------+
| 与当前分支合并（从跟踪分支）| git pull                                                       |
+-----------------------------+----------------------------------------------------------------+

push
----

推送原则上要同名

使用 -u 参数，会在配置文件中增加 [branch] 块

+-----------------------------------------+----------------------------------------------------------------+
| 描述                                    | 命令                                                           |
+=========================================+================================================================+
| 完整形式                                | git push server local_branch:remote_branch                     |
+-----------------------------------------+----------------------------------------------------------------+
| 推送到同名分支，不存在则新建            | git push server local_branch                                   |
+-----------------------------------------+----------------------------------------------------------------+
| 跟踪同名分支，不存在则新建              | git push -u server local_branch                                |
+-----------------------------------------+----------------------------------------------------------------+
| 当前分支要和跟踪分支同名（之前已-u）    | git push server                                                |
+-----------------------------------------+----------------------------------------------------------------+
| 当前分支要和跟踪分支同名（之前已-u）    | git push                                                       |
+-----------------------------------------+----------------------------------------------------------------+
| 删除远程分支                            | git push server :remote_branch                                 |
+-----------------------------------------+----------------------------------------------------------------+

diff
----

+----------------------------+----------------------------------------------------------------+
| 描述                       | 命令                                                           |
+============================+================================================================+
| 对比工作区和暂存区         | git diff                                                       |
+----------------------------+----------------------------------------------------------------+
| 对比暂存区和HEAD           | git diff --cached                                              |
+----------------------------+----------------------------------------------------------------+

撤销操作
--------

* `git的reset和checkout的区别​ <https://segmentfault.com/a/1190000006185954>`_
* `代码回滚：git reset、git checkout和git revert区别和联系​ <https://www.cnblogs.com/houpeiyong/p/5890748.html>`_

commit级别
^^^^^^^^^^

分支（master，dev），HEAD 等都是指针，reset 和 checkout 的直接区别就是 reset 会移动 HEAD 和分支的指向，而 checkout 只会移动 HEAD，对分支没有影响。

git reset commit 操作会销毁掉 commit 之后的提交，所以已经push过的，不要使用reset。

git checkout 在Index或Workdir有修改的情况下，如果commit和HEAD不一样，会提示：

.. code-block:: bash

    error: Your local changes to the following files would be overwritten by checkout:
        log
    Please commit your changes or stash them before you switch branches.

如果commit和HEAD一样，则不提示，也不做任何改变，比如两个分支目前HEAD相同的情况。

下面是commit级别各个操作对暂存区和工作区的影响，0代表不变，1代表改变：

+-------------------------------+-----------------+-------------------+-----------+
| 操作                          | Index（暂存区） | Workdir（工作区） |           |
+===============================+=================+===================+===========+
| git reset --soft [commit]     |       0         |         0         |           |
+-------------------------------+-----------------+-------------------+-----------+
| git reset [--mixed] [commit]  |       1         |         0         |           |
+-------------------------------+-----------------+-------------------+-----------+
| git reset --hard [commit]     |       1         |        **1**      |           |
+-------------------------------+-----------------+-------------------+-----------+
| git checkout [commit]         |       1         |        **1**      |   会提醒  |
+-------------------------------+-----------------+-------------------+-----------+

file级别
^^^^^^^^

git reset HEAD -- file 相当于撤销add操作（unstage）。

git checkout commit -- file = git reset --hard commit -- file （可惜不存在）

下面是file级别各个操作对暂存区和工作区的影响，0代表不变，1代表改变：

+--------------------------------+-----------------+-------------------+-----------+
| 操作                           | Index（暂存区） | Workdir（工作区） |           |
+================================+=================+===================+===========+
| git reset commit -- [file]     |       1         |        0          |           |
+--------------------------------+-----------------+-------------------+-----------+
| git checkout commit -- [file]  |       1         |       **1**       |           |
+--------------------------------+-----------------+-------------------+-----------+

拉取远程分支
------------

查看分支

.. code-block:: bash

    git branch -vv
    git branch -r

方法一(创建并切换):

.. code-block:: bash

    git checkout -b dev origin/dev

方法二(先创建后切换):

.. code-block:: bash

    git fetch origin dev:dev
    git checkout dev